import{_ as a,p as e,q as i,a1 as r}from"./framework-69837a10.js";const p={},h=r('<h1 id="plugin" tabindex="-1"><a class="header-anchor" href="#plugin" aria-hidden="true">#</a> plugin</h1><h2 id="plugin工作原理" tabindex="-1"><a class="header-anchor" href="#plugin工作原理" aria-hidden="true">#</a> plugin工作原理</h2><p>webpack 就像一条生产线，要经过一系列处理流程后才能将源文件转换为输出结果，在这个生产线上的每个处理流程的职责都是单一的，多个流程之间有存在依赖关系，只有完成当前处理后才能交给下一个流程处理。</p><p>插件可以理解为生产线上的一个扩展功能，可以在特定的时机对生产线上的资源进行处理。</p><p>webpack 通过 tapable 来组织这条复杂的生产线，webpack在运行过程中会广播事件，插件只需要监听它所关心的事情，在监听到事件后对当前节点的资源操作就可以完成开发人员要实现的结果。</p><h2 id="webpack内部的钩子" tabindex="-1"><a class="header-anchor" href="#webpack内部的钩子" aria-hidden="true">#</a> webpack内部的钩子</h2><h3 id="钩子" tabindex="-1"><a class="header-anchor" href="#钩子" aria-hidden="true">#</a> 钩子</h3><p>钩子的本质是事件。为了方便开发者直接介入和控制编译过程，webpack把编译过程中触发的各类关键事件接口暴露出来，这些接口被形象的称为：hooks（钩子）。</p><h3 id="tapable" tabindex="-1"><a class="header-anchor" href="#tapable" aria-hidden="true">#</a> Tapable</h3><p>Table 为 webpack 提供了统一的插件接口类型（钩子）定义，还暴露了三个方法给插件，用于注入不同类型的自定义构建行为：</p><ul><li>tap: 可以注册同步钩子和异步钩子</li><li>tapAsync: 回调方式注册异步钩子</li><li>tabPromise: Promise方式注册异步钩子</li></ul><h3 id="plugin构建对象" tabindex="-1"><a class="header-anchor" href="#plugin构建对象" aria-hidden="true">#</a> Plugin构建对象</h3><h4 id="compiler" tabindex="-1"><a class="header-anchor" href="#compiler" aria-hidden="true">#</a> Compiler</h4><p>compiler 对象中保存着完整的webpack环境配置，每次启动webpack时它都是独一无二的，只会创建一次。</p><p>这个对象会在首次启动 webpack 时创建，可以通过 compiler 对象 访问到 webpack 主环境的配置，如 loader、plugin等配置信息。</p>',15),c=[h];function n(l,d){return e(),i("div",null,c)}const o=a(p,[["render",n],["__file","piugin.html.vue"]]);export{o as default};
