import{_ as t,p as e,q as d,Q as r,a1 as a}from"./framework-69837a10.js";const i={},n=a(`<h1 id="盒模型" tabindex="-1"><a class="header-anchor" href="#盒模型" aria-hidden="true">#</a> 盒模型</h1><h2 id="盒子的组成" tabindex="-1"><a class="header-anchor" href="#盒子的组成" aria-hidden="true">#</a> 盒子的组成</h2><p>一个盒子由外到内可以分为四个部分: margin（外边距）、border（边框）、padding（内边距）、content（内容）。其中margin、border、padding是css属性，因此可以通过这三个盒子来控制盒子的这三个部分，content则是HTML元素的内容。</p><h2 id="盒子的大小" tabindex="-1"><a class="header-anchor" href="#盒子的大小" aria-hidden="true">#</a> 盒子的大小</h2><p>盒子的大小是整个盒子的宽度和高度，所以可以得到盒子的宽高计算方式（默认情况下）：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>盒子的宽度 = content-width + padding-left + padding-right + border-right + border-left + margin-left + margin-right
盒子的高度 = content-height + padding-top + padding-bottom + border-top + border-bottom + margin-top + margin-bottom
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="不同盒模型对大小的计算差异" tabindex="-1"><a class="header-anchor" href="#不同盒模型对大小的计算差异" aria-hidden="true">#</a> 不同盒模型对大小的计算差异</h2><p>我们先来了解一下<code>box-sizing</code>属性：</p><table><thead><tr><th>值</th><th>说明</th></tr></thead><tbody><tr><td>content-box</td><td>默认值。如果你设置一个元素的宽为 100px，那么这个元素的内容区会有 100px 宽，并且任何边框和内边距的宽度都会被增加到最后绘制出来的元素宽度中。</td></tr><tr><td>border-box</td><td>告诉浏览器：你想要设置的边框和内边距的值是包含在 width 内的。也就是说，如果你将一个元素的 width 设为 100px，那么这 100px 会包含它的 border 和 padding，内容区的实际宽度是 width 减 去(border + padding) 的值。大多数情况下，这使得我们更容易地设定一个元素的宽高。</td></tr><tr><td>注：border-box 不包含 margin。</td><td></td></tr><tr><td>inherit</td><td>指定 box-sizing 属性的值，应该从父元素继承</td></tr></tbody></table><p>当 <code>box-sizing: content-box</code>时，盒子模型为 <code>标准盒子模型</code>，当<code>box-sizing: border-box</code>时，这种盒子模型称为<code>IE盒子模型</code>。</p>`,10);function o(c,h){return e(),d("div",null,[n,r(` ## BFC

## IFC `)])}const b=t(i,[["render",o],["__file","box-sizing.html.vue"]]);export{b as default};
